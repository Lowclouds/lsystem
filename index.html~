<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title>Turtle3d Playground</title>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 2px;
            }
	    .mbox {
		display: flex;
		width: 100%;
		height: 80%;
	    }

            #renderCanvas {
                width: 60%;
                height: 100%;
                touch-action: none;
            }
	    
	    .right-side {
		width:38%;
		height:100%;
	    }
	    .tbl {
		width: 100%;
		border: 2px solid black;
		margin: 5px;
	    }
	    tr, td {
		border: 2px solid black;
	    }
	    button {
		border: 2px solid black;
		margin: 5px;
		padding: 3px;
	    } 
	    .tio {
		width: 100%;
		border: 2px solid black;
		margin: 5px; /**/
	    }
        </style>

	<script src="https://cdn.babylonjs.com/babylon.js"></script>
        <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
        <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
	<script src="scripts/turtle3d.js"></script>
    </head>

   <body>
     <header> 
       <h1 align="center">Turtle3d Playground </h1>
     </header>

     <div class="mbox">
       <canvas id="renderCanvas" touch-action="none"></canvas> <!-- touch-action="none" for best results from PEP -->
       
       <div class="right-side">
	 <span class="btnrow" id="btns1"> 
	   <button class="abutton" id="btn1">Click</button>
	   <button class="abutton" id="btn2">Click</button>
	   <button class="abutton" id="btn3">Click</button>
	 </span>
	 <table class="tbl">
	   <tr><td>V1</td><td>V2</td><td> V1 X V2 </td></tr>
7	   <tr><td id="v1"></td><td id="v2"></td><td id=vperp></td></tr>
	 </table>
	 <textarea class="tio" id="text1" rows="5" cols="40"></textarea>
	 <textarea class="tio" id="text2" rows="5" cols="40"></textarea>
       </div>
     </div>
     
     <script>
       //var button = document.createElement("button");
       var showhidebtn = document.getElementById('btn1');
       showhidebtn.textContent = "Show/Hide";

       var clearbtn = document.getElementById('btn2');
       clearbtn.textContent = "Clear";

       var homebtn = document.getElementById('btn3');
       homebtn.textContent = "Home";

       var v1Display = document.getElementById('v1');
       var v2Display = document.getElementById('v2');
       var vperpDisplay = document.getElementById('vperp');
       
       var ts = {
	   v1:  new BABYLON.Vector3(1,0,0),
	   v2: new BABYLON.Vector3(0,1,0),
	   vperp: new BABYLON.Vector3.Zero(),
       };
       ts.vperp = BABYLON.Vector3.Cross(ts.v1, ts.v2);
       
       v1Display.textContent = ts.v1;
       v2Display.textContent = ts.v2;
       vperpDisplay.textContent = ts.vperp;
       
       const canvas = document.getElementById("renderCanvas"); // Get the canvas element
       const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine
       
       // Add your code here matching the playground format
       const createScene = function () {
	   
           const scene = new BABYLON.Scene(engine);  
	   
           const camera = new BABYLON.ArcRotateCamera("Camera",0,0,20, BABYLON.Vector3.Zero(), scene);
	   camera.setPosition(new BABYLON.Vector3(2, 5,-10));
	   //camera.zoomToMouseLocation= false;
	   camera.wheelDeltaPercentage = 0.001;
           //const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 1, new BABYLON.Vector3(0, 0, 0));
           camera.attachControl(canvas, true);
           const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(5, 5, 10));
	   var ground = BABYLON.MeshBuilder.CreateGround("ground", {width:20, height:20});
	   var gMaterial = new BABYLON.StandardMaterial("gMaterial", scene);
	   
	   gMaterial.diffuseColor = new BABYLON.Color3(.1, .8, .2);
	   ground.material = gMaterial;
	   
           return scene;
       };
       
       
       const scene = createScene(); //Call the createScene function
       
       // Register a render loop to repeatedly render the scene
       engine.runRenderLoop(function () {
           scene.render();
       });
       
       // Watch for browser/canvas resize events
       window.addEventListener("resize", function () {
           engine.resize();
       });
       
       function make_axes () {
	   var axes_displayed = true;
	   var pts = [new BABYLON.Vector3(-20,0,0), new BABYLON.Vector3(20,0,0)];
	   var xaxispath= new BABYLON.Path3D(pts);
	   var xaxis = BABYLON.Mesh.CreateLines('xaxis', xaxispath.getCurve(), scene);
	   xaxis.color = BABYLON.Color3.Red();
	   var yaxispts =[];
	   yaxispts.push(new BABYLON.Vector3(0, 0 ,0));
	   yaxispts.push(new BABYLON.Vector3(0,20,0));
	   var yaxispath= new BABYLON.Path3D(yaxispts);
	   var yaxis = BABYLON.Mesh.CreateLines('yaxis', yaxispath.getCurve(), scene);
	   yaxis.color = BABYLON.Color3.Green();
	   var zaxispts =[];
	   zaxispts.push(new BABYLON.Vector3(0,0,-20));
	   zaxispts.push(new BABYLON.Vector3(0, 0, 20));
	   var zaxispath = new BABYLON.Path3D(zaxispts);
	   var zaxis = BABYLON.Mesh.CreateLines('zaxis', zaxispath.getCurve(), scene);
	   zaxis.color = BABYLON.Color3.Blue();
       }

       var t = new Turtle3d(scene);
        console.log(t.TurtleState);
       // console.log(Turtle3d.prototype.t3dIDTag);
       // var t1 =  new Turtle3d();
       // console.log(Turtle3d.prototype.t3dIDTag);
       // console.log(t1.TurtleState);
       
       // t.forward(2);
       // t1.forward(1);
       // t1.hide();
       
       make_axes();
       
       showhidebtn.addEventListener("click", () => {
	   if (t && t.isShown()) {
	       t.hide();
	       t1.show();
	   } else if (t1 && t1.isShown()) {
	       t1.hide();
	       t.show();
	   }
       })
       clearbtn.addEventListener("click", () => {
	   if (t && t.isShown()) {
	       t.clear();
	   }
	   if (t1 && t1.isShown()) {
	       t1.clear();
	   }
       });
       homebtn.addEventListener("click", () => {
	   console.log('clicked home');
       });
       
     </script>
   </body>
</html>
